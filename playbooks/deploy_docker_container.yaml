---
- name: Install dependencies in servers
  hosts: docker_server
  gather_facts: yes
  vars_files:
    - "{{ project_path }}/vars/vars_dependencies.yml"
  tasks:
  - name: "Define Python Interpreter"
    set_fact:
      my_interpreter: "{{ ansible_python_interpreter }}"

  - name: "Override temporarily Python Interpeter for CentOS7 or RHEL7"
    set_fact:
      my_interpreter: "/usr/bin/python"
    when: (ansible_facts['distribution'] == "CentOS" and ansible_facts['distribution_major_version'] == "6") or
          (ansible_facts['distribution'] == "RedHat" and ansible_facts['distribution_major_version'] == "7")
    #https://github.com/ansible/ansible/issues/67083

  - name: install system dependencies
    package:
      name: "{{ system_dependencies }}"
      state: latest
    become: true
    vars:
      ansible_python_interpreter: "{{ my_interpreter }}"
      
  - name: install python3 dependencies
    pip: 
      name: "{{ python3_dependencies }}"
      executable: pip3

- name: Validate if container is running. Otherwise deploy container and validate again
  hosts: docker_server
  serial: "{{ playbook_serial | default(0)}}"
  vars_files: 
    - "{{ project_path }}/vars/vars_pytest.yml"
    - "{{ project_path }}/vars/vars_tomcat_docker_container.yml"
  pre_tasks:
    - debug: 
        msg: "Starting to test container"  
      run_once: True
      delegate_to: localhost
  roles:
    - role: docker_container_test
      vars: 
        container_test_params: "{{ tomcat_container_test_params }}"
        script_test_name: "{{ tomcat_script_test_name }}"
    - role: docker_container_builder_deployer #poner opciones adicionales asi como logging, etc. 
      vars:
        dockerfile_name: "{{ tomcat_dockerfile_name }}"
        docker_image_args: "{{ tomcat_docker_image_args }}"
        container_name: "{{ tomcat_container_name }}"
        image_name: "{{ tomcat_container_image_name }}"
        image_tag: "{{ tomcat_container_image_tag }}"
        container_port: "{{ tomcat_container_port }}"
        host_map_port: "{{ tomcat_container_host_map_port }}"
      when: "pytest_result == '1'" 
    - role: docker_container_test
      vars: 
        container_test_params: "{{ tomcat_container_test_params }}"
        script_test_name: "{{ tomcat_script_test_name }}"
      when: "pytest_result == '1'" 
  post_tasks:
    - debug: 
        msg: "{% if pytest_result=='0' %}Container {{ tomcat_container_name }} is up and running in host {{ inventory_hostname }}{% elif pytest_result=='1' %}Container {{ tomcat_container_name }} is down in host {{ inventory_hostname }}{% else %}Test crashed, checkout the params, unable to validate if container is running{% endif %}"
      failed_when: "pytest_result!='0'"
